import { Template, Option } from "@/types/forms";
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatPhone(value: string): string {
  //React.ChangeEvent<HTMLInputElement>
  if (!value) return value;

  const onlyNums: string = value.replace(/[^\d]/g, '');
  let newValue = onlyNums;

  if (onlyNums.length > 2)
    newValue = `(${onlyNums.slice(0, 2)}) ${onlyNums.slice(2, 6)}`;

  if (onlyNums.length > 6) newValue += `-${onlyNums.slice(6)}`;

  if (onlyNums.length > 10) newValue = `(${onlyNums.slice(0, 2)}) ${onlyNums.slice(2, 7)}-${onlyNums.slice(7)}`;

  if (newValue.length > 7) return newValue.slice(0, 15);

  return newValue;
}

type Valuable<T> = { [K in keyof T as T[K] extends null | undefined ? never : K]: T[K] };

export function getValuable<
  T extends {},
  V = Valuable<T>,
>(obj: T): V {
  return Object.fromEntries(
    Object.entries(obj).filter(
      ([, v]) =>
        !(
          (typeof v === 'string' && !v.length) ||
          v === null ||
          typeof v === 'undefined'
        ),
    ),
  ) as V;
}

export function createQueryString(name: string, value: string): string {
  const params = new URLSearchParams();
  params.set(name, value);

  return params.toString();
};

export function sleep(ms: number) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}

export function groupBy(arr, property) {
  // Utiliza o m√©todo reduce para iterar sobre o array e acumular o resultado
  return arr.reduce((acc, cur) => {
    
    // Utiliza a propriedade fornecida para acessar o valor correspondente no elemento atual
    // Cria uma entrada no objeto de acumulador (acc) com a chave sendo o valor da propriedade
    // Se a chave j√° existe, adiciona o elemento atual ao array existente, sen√£o cria um novo array
    acc[cur[property]] = [...acc[cur[property]] || [], cur];
    
    // Retorna o objeto acumulador atualizado para a pr√≥xima itera√ß√£o
    return acc;
  }, {}); // O objeto inicial para acumula√ß√£o √© um objeto vazio
}

export function chunk<T>(arr: T[], batchSize: number): T[][] {
  // Utiliza o m√©todo reduce no array de entrada (arr)
  return arr.reduce((batches, curr, i) => {
      // Verifica se o √≠ndice atual (i) √© divis√≠vel pelo tamanho do lote (batchSize)
      if (i % batchSize === 0) {
          // Se for divis√≠vel, adiciona um novo array vazio ao array de lotes (batches)
          batches.push([]);
      }
      // Adiciona o elemento atual (curr) ao √∫ltimo lote (batch) no array de lotes
      batches[batches.length - 1].push(arr[i]);
      // Retorna os lotes atualizados
      return batches;
  }, [] as T[][]); // Inicializa o array de lotes com um array vazio
}

export function randomizeArray(array: any[]): any[] {
  return array.sort(() => Math.random() - 0.5);
}

export function idGenerator(): string {
  return Math.floor(Math.random() * 10001).toString();
}

export function convertTemplatesToOptions(templates: Template[]): Option[] {
  return templates.map(template => ({
      label: template.title,
      value: template.uid! // uid n√£o pode ser undefined
  }));
};

export function isSameDay(date1: Date, date2: Date): boolean {
  return date1.getDate() === date2.getDate() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getFullYear() === date2.getFullYear();
}

// Fun√ß√£o para transformar texto em negrito usando caracteres Unicode
export function boldify(text: string) {
  const boldMap = {
    'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥', 'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫',
    'n': 'ùóª', 'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ', 'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá',
    'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö', 'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†',
    'N': 'ùó°', 'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®', 'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
    '0': 'ùü¨', '1': 'ùü≠', '2': 'ùüÆ', '3': 'ùüØ', '4': 'ùü∞', '5': 'ùü±', '6': 'ùü≤', '7': 'ùü≥', '8': 'ùü¥', '9': 'ùüµ', ' ': ' ',
    '√°': 'ùóÆÃÅ', '√©': 'ùó≤ÃÅ', '√≠': 'ùó∂ÃÅ', '√≥': 'ùóºÃÅ', '√∫': 'ùòÇÃÅ', '√£': 'ùóÆÃÉ', '√µ': 'ùóºÃÉ', '√¢': 'ùóÆÃÇ', '√™': 'ùó≤ÃÇ', '√Æ': 'ùó∂ÃÇ', '√¥': 'ùóºÃÇ', '√ª': 'ùòÇÃÇ',
    '√†': 'ùóÆÃÄ', '√®': 'ùó≤ÃÄ', '√¨': 'ùó∂ÃÄ', '√≤': 'ùóºÃÄ', '√π': 'ùòÇÃÄ', '√§': 'ùóÆÃà', '√´': 'ùó≤Ãà', '√Ø': 'ùó∂Ãà', '√∂': 'ùóºÃà', '√º': 'ùòÇÃà', '√ß': 'ùó∞Ãß',
    '√Å': 'ùóîÃÅ', '√â': 'ùóòÃÅ', '√ç': 'ùóúÃÅ', '√ì': 'ùó¢ÃÅ', '√ö': 'ùó®ÃÅ', '√É': 'ùóîÃÉ', '√ï': 'ùó¢ÃÉ', '√Ç': 'ùóîÃÇ', '√ä': 'ùóòÃÇ', '√é': 'ùóúÃÇ', '√î': 'ùó¢ÃÇ', '√õ': 'ùó®ÃÇ',
    '√Ä': 'ùóîÃÄ', '√à': 'ùóòÃÄ', '√å': 'ùóúÃÄ', '√í': 'ùó¢ÃÄ', '√ô': 'ùó®ÃÄ', '√Ñ': 'ùóîÃà', '√ã': 'ùóòÃà', '√è': 'ùóúÃà', '√ñ': 'ùó¢Ãà', '√ú': 'ùó®Ãà', '√á': 'ùóñÃß'
  };
  return text.split('').map(c => boldMap[c] || c).join('');
};

export function convertTimestampToDate(obj: any, keys: string[]) {
  Object.keys(obj).forEach(key => {
    if (keys.includes(key) && obj[key].toDate) {
      obj[key] = obj[key].toDate();
    }
  });
  return obj;
};